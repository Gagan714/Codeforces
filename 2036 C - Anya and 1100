import java.util.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            sc.nextLine();
            String n = sc.nextLine();
            int[] arr1 = new int[n.length()];
            
            for (int i = 0; i < n.length(); i++) {
                arr1[i] = n.charAt(i) - '0';
            }

            HashMap<Integer, int[]> map = new HashMap<>();
            for (int i = 0; i <= n.length() - 4; i++) {
                if (arr1[i] == 1 && arr1[i + 1] == 1 && arr1[i + 2] == 0 && arr1[i + 3] == 0) {
                    int[] indices = {i, i + 1, i + 2, i + 3};
                    for (int index : indices) {
                        map.put(index, indices);
                    }
                }
            }

            int g = sc.nextInt();
            for (int i = 0; i < g; i++) {
                int num = sc.nextInt() - 1;
                int num2 = sc.nextInt();

                if (arr1[num] == num2) {
                    System.out.println(!map.isEmpty() ? "Yes" : "No");
                    continue;
                }

                arr1[num] = num2;

                if (map.containsKey(num)) {
                    int[] affectedPattern = map.get(num);
                    for (int index : affectedPattern) {
                        map.remove(index);
                    }
                }

                int start = Math.max(0, num - 3);
                int end = Math.min(arr1.length - 4, num);

                for (int j = start; j <= end; j++) {
                    if (arr1[j] == 1 && arr1[j + 1] == 1 && arr1[j + 2] == 0 && arr1[j + 3] == 0) {
                        int[] newPattern = {j, j + 1, j + 2, j + 3};
                        for (int index : newPattern) {
                            map.put(index, newPattern);
                        }
                    }
                }

                System.out.println(!map.isEmpty() ? "Yes" : "No");
            }
        }
    }
}
